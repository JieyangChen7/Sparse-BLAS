/*! \mainpage CTrilinos: C interface to Trilinos

\section purpose Purpose of CTrilinos

Trilinos is implemented in C++ to allow it to take advantage of the
many benefits of object-oriented programming.  There are a number of
scientific communities that, due to the existence of legacy codes,
are centered around the Fortran language.  Although the Fortran 2003
standard has added object-oriented features that are finally making
it into compiler implementations, the language interoperability
features are limited to the (non-object-oriented) C language.  Our
solution to the problem of interfacing object-oriented Fortran to
the object-oriented features of Trilinos that are implemented in C++
is as follows:

\code
Trilinos
   ||
   \/
CTrilinos
   ||
   \/
ForTrilinos
procedural
 bindings
   ||
   \/
ForTrilinos
  objects
\endcode

The CTrilinos layer is a set of C++ helper code whose function
prototypes are declared <tt>extern C</tt> in order to be callable
from C.  The ForTrilinos procedural bindings are simply a
<tt>bindC</tt> interface to CTrilinos.  Finally, the ForTrilinos
objects are lightweight objects that wrap the procedural bindings to
give ForTrilinos an object-oriented interface.

The C language lacks many features utilized by Trilinos, e.g. function
overloading, inheritance, operator overloading, templated functions,
and templated classes.  This leads to an awkward interface between the
C and C++ code.  We let our goal of providing an object-oriented
Fortran interface to Trilinos guides our design philosophy.  In
particular, we plan so that some of the less-than-elegant features of
the intermediate layers can be hidden by the object-oriented Fortran
layer.

Functionality from many classes in other Trilinos packages has been
brought to the ForTrilinos procedural bindings through CTrilinos.
Providing access to that functionality via the object-oriented
portion of ForTrilinos, in a way that is intuitive to Fortran users,
is something that we are still working out.  Unimplemented/buggy
features from the Fortran 2003 standard have caused us to put off
many design decisions relating to this aspect of the code.

\section invoking Invoking Object Methods from C

Say we have a pointer, <tt>mv</tt>, to an object of class
Epetra_MultiVector.  In C++, we would invoke the method
<tt>Random()</tt> directly on the object, i.e.:

\code
Epetra_MultiVector *mv = new Epetra_MultiVector(...);
mv->Random();
\endcode

Although C can handle pointers to C++ classes, it cannot be used to
directly invoke the class methods on the object.  Instead, a helper
function with an interface that allows it to be called from C (using
<tt>extern C</tt>) needs to be implemented in C++.  Such a helper
function is named for the class and method it invokes for us, i.e.:

\code
Epetra_MultiVector_Random(mv);  /* Exposes raw pointers to C */
\endcode

This solution, however, would give the C code access to raw pointers,
which is a segfault waiting to happen.  Instead, we can give the
object a "name" and then deny the C code direct access to the
object's pointer.  The C code would only be allowed to refer to the
object by name (or some other identifying information), e.g.:

\code
Epetra_MultiVector_Random(mv_id);  /* Safer! */
\endcode

This is the approach we have taken with CTrilinos.

\section implem The CTrilinos Implementation

Trilinos denies the interfaced C or Fortran code direct access to
the objects intantiated by Trilinos by storing them internally in
type-specific tables and only allowing the objects to be referred to
by "name".

To refer to an object, one uses a struct containing identifying
information.  As far as the user need be concerned, this identifying
(ID) struct is a black box.  There is <b>NEVER</b> a valid reason for
the user to directly modify the internal state of the ID struct.

Each wrapped class has its own custom (but internally identical) ID
struct type to allow for compile-time type checking.  Using the C
language casting construct to switch the type of the struct may allow
the code to compile, but it <b>will</b> result in an exception being
thrown from deep within CTrilinos, which will gracelessly terminate
execution.  To create an Epetra_MultiVector, one would follow the
example below:

\code
CT_Epetra_MultiVector_ID_t mv_id;
mv_id = Epetra_MultiVector_Create(...);
\endcode

If the ID struct for an object goes out of scope, the underlying
object will not be destroyed and the user will lose the ability to
destroy it.  The CTrilinos object-specific <tt>_Destroy()</tt>
function should <b>always</b> be invoked before the ID struct goes
out of scope.  If an entry in another table refers to the same
underlying object, invoking this destructor will not have an adverse
effect; the object will not be freed until there are no remaining
entries for it in any table.

The ID struct should <b>never</b> be duplicated; this will not prevent
the underlying object from being freed and will instead lead to
unexpected results if the table entry is later re-used for a new
object.

Because the internal state of the ID struct should remain constant
over the life of an object, the only CTrilinos function that expects
to be passed a pointer to the ID struct is the <tt>_Destroy()</tt>
function.  Calling this function will, at a minimum, set the
<tt>type</tt> member of the ID struct to the value
<tt>CT_Invalid_ID</tt>.  To invoke this function on an
Epetra_MultiVector:

\code
Epetra_MultiVector_Destroy(&mv_id);
\endcode

If one passes an ID struct by value to a user function that calls the
<tt>_Destroy()</tt> function on an object, the change in internal
state of the ID struct associated with the removal of the object from
the table will not be propagated back to the calling function, and
will result in the same undesirable effects as duplicating the ID
struct.

\section devdetails Developer-Level Details

Each class wrapped by CTrilinos has associated with it a pair of
tables of templated class <tt>CTrilinos_Table</tt>.
<tt>CTrilinos_Table</tt> is derived from the templated
<tt>Teuchos::SimpleObjectTable</tt>.

The type-specific ID struct for each wrapped class has an identical
form to the generic ID struct, <tt>CTrilinos_Universal_ID_t</tt>:

\code
typedef struct {
    CTrilinos_Table_ID_t table;
    int index;
    boolean is_const;
} CTrilinos_Universal_ID_t;
\endcode

The ID structs presently contain three members:

<tt>table</tt>: an enumerated data type identifying which table holds
a reference to the object.  The table stores a reference counter
pointer (<tt>RCP</tt>) to each object, not a copy of the object
itself.  The reference-counting feature of the <tt>RCP</tt> applies
only within CTrilinos itself and will not affect the user code.  The
type of the table holding a reference to an object does not
necessarily correspond to the type of the underlying object.

<tt>is_const</tt>: a boolean indicating whether the object was
declared <tt>const</tt> at the time the reference to it was stored in
the table.  An <tt>RCP</tt> to a <tt>const</tt> object would be
stored in a separate table from one whose internal state is allowed
to be modified.

<tt>index</tt>: which entry in the table corresponds to the object in
question.  Table indices are recycled when objects are removed from
the table and new ones are added.

If the user were to modify the internal state of any instance of the
ID struct, the consequences would be disasterous.  In the future, it
might be prudent to add a checksum to the struct so that corruption
can be detected.  Although this would likely have negligible effect
on the memory footprint of the code, verifying the checksum every time
the user requests that a method be invoked might incur a substantial
performance hit.

The tables are designed to prevent segfaults by catching attempts to
access invalid table entries.  Table indices are recycled, however,
so a user who duplicated an ID struct somewhere along the line could
potentially be accessing a completely different object than expected.
Later, we will present a list of "rules" that users should follow in
order to prevent such an occurrence.

Although CTrilinos uses an <tt>RCP</tt> to decide when to free the
underlying object, the user must explicitly remove objects from the
tables when they are no longer needed.  If the underlying object was
created using a CTrilinos wrapper for a constructor, then CTrilinos
assumes ownership of that object and will free it when it is no
longer referenced by any CTrilinos table.

However, when a pointer or reference to an object (call it <tt>B</tt>)
is returned by a method of object <tt>A</tt>, CTrilinos operates under
the assumption that <tt>B</tt> may be in use insternally by
<tt>A</tt>, and will only store a non-owned <tt>RCP</tt> to the
object.  As such, CTrilinos will never attempt to free <tt>B</tt>,
even when no references to it remain in a CTrilinos table.  In this
case, it is possible that <tt>B</tt> could be destroyed when
<tt>A</tt> is destroyed, and that an entry for it will still exist in
the table.  In this case, a sefgault could occur.

\section externc The Pain of "extern C"

The C language does not support function overloading, so all
overloaded functions (like constructors) must be given unique names.
For example, the overloaded constructors:

\code
Epetra_MultiVector::Epetra_MultiVector(const Epetra_BlockMap& Map, int NumVectors, bool zeroOut = true);
Epetra_MultiVector::Epetra_MultiVector(const Epetra_MultiVector& Source);
Epetra_MultiVector::Epetra_MultiVector(Epetra_DataAccess CV, const Epetra_BlockMap& Map, double *A, int MyLDA, int NumVectors);
Epetra_MultiVector::Epetra_MultiVector(Epetra_DataAccess CV, const Epetra_BlockMap& Map, double **ArrayOfPointers, int NumVectors);
Epetra_MultiVector::Epetra_MultiVector(Epetra_DataAccess CV, const Epetra_MultiVector& Source, int *Indices, int NumVectors);
Epetra_MultiVector::Epetra_MultiVector(Epetra_DataAccess CV, const Epetra_MultiVector& Source, int StartIndex, int NumVectors);
\endcode

would each need to be given a unique name when wrapped.  Check the
Doxygen pages to find out how your favorite overloaded functions have
been renamed!

The C language has no concept of inheritance, so a separate wrapper
would have to be created for each class that inherits a given method
from the parent class.  For example, the wrapper for the method

\code
int Epetra_MultiVector::Norm2(double * Result) const;
\endcode

would only invoke the <tt>Norm2()</tt> method of an Epetra_MultiVector
object, even though Epetra_Vector inherits this method.  A separate
wrapper would need to be written for Epetra_Vector.

Also because the C language has no concept of inheritance, a separate
wrapper would have to be created for each class derived from each
argument of a given method.  For example, for a hypothetical method
of the Epetra_RowMatrix class that takes any other Epetra_RowMatrix
as an argument: there are about six flavors of Epetra_RowMatrix, so
that would be 36 wrappers to create, all with unique names?!

\section casting Possible Casting Solutions

Following from the example mentioned in the above paragraph, such a
C++ class method might be invoked as follows:

\code
Epetra_CrsMatrix *A = new Epetra_CrsMatrix(...);
Epetra_JadMatrix *B = new Epetra_JadMatrix(...);

A->TwoRowMatrixOp(B);
\endcode

The corresponding C code would be:

\code
CT_Epetra_CrsMatrix_ID_t A;
CT_Epetra_JadMatrix_ID_t B;

A = Epetra_CrsMatrix_Create(...);
B = Epetra_JadMatrix_Create(...);

Epetra_RowMatrix_TwoRowMatrixOp_Crs_Jad(A, B);
\endcode

This looks pretty simple until you remember that there are 35 other
versions of <tt>Epetra_RowMatrix_TwoRowMatrixOp()</tt>!

An alternative involving explicit casting would be:

\code
CT_Epetra_CrsMatrix_ID_t A;
CT_Epetra_JadMatrix_ID_t B;
CT_Epetra_RowMatrix_ID_t rA, rB;

A = Epetra_CrsMatrix_Create(...);
rA = Cast_To_Epetra_RowMatrix(A);

B = Epetra_JadMatrix_Create(...);
rB = Cast_To_Epetra_RowMatrix(B);

Epetra_RowMatrix_TwoRowMatrixOp(rA, rB);
\endcode

Now we only have one version of the wrapper, but we still need casting
functions.  You may have noticed that ID structs for Epetra_CrsMatrix
and Epetra_JadMatrix have been passed to the same casting function
above, which is not possible in C!

If we create a separate casting function for every pair of classes
(source type and resulting type), we will again have an O(N^2)
explosion of code.  We could cut down on some of the code by
carefully tracking inheritance and only creating functions for legal
casts, but that would potentially require modifying the wrappers for
<b>every</b> class each time a new class is wrapped.

\section unioncast Casting Solution

To make life easier for users, we have provided a set of union types
that correspond to each of the struct types.  Within each union, there
is a struct member corresponding to itself, its generic, and each
class above it in the inheritance hierarchy.  For example, the "flex"
ID for an Epetra_CrsMatrix is defined as follows:

\code
typedef union {
    CTrilinos_Universal_ID_t universal;
    CT_Epetra_CrsMatrix_ID_t Epetra_CrsMatrix;
    CT_Epetra_BLAS_ID_t Epetra_BLAS;
    CT_Epetra_CompObject_ID_t Epetra_CompObject;
    CT_Epetra_DistObject_ID_t Epetra_DistObject;
    CT_Epetra_Object_ID_t Epetra_Object;
    CT_Epetra_Operator_ID_t Epetra_Operator;
    CT_Epetra_RowMatrix_ID_t Epetra_RowMatrix;
    CT_Epetra_SrcDistObject_ID_t Epetra_SrcDistObject;
} CT_Epetra_CrsMatrix_ID_Flex_t;
\endcode

The previous example then becomes:

\code
CT_Epetra_CrsMatrix_ID_Flex_t A;
CT_Epetra_JadMatrix_ID_Flex_t B;

A.Epetra_CrsMatrix = Epetra_CrsMatrix_Create(...);
B.Epetra_JadMatrix = Epetra_JadMatrix_Create(...);

Epetra_RowMatrix_TwoRowMatrixOp_Crs_Jad(A.Epetra_RowMatrix, B.Epetra_RowMatrix);
\endcode

\section twostep The Two-Step Struct Conversion

Primarily because unions can only be used from C and not from Fortran,
a second method is provided for dealing with struct type conversions.
Each class has a function <i>class_name</i>_Generalize() which will
convert the struct from a class-specific one to the generic one common
to all classes.  There is also a corresponding
<i>class_name</i>_Degeneralize() function that does the opposite.
Using these functions causes the content of an ID struct to be
duplicated, which can lead to unexpected behavior after an object is
destroyed if the user is careless.  Therefore, this is not the
preferred solution for C users.

\section perf Performance Improvement

The casting discussion above is restricted to struct type conversion
and has no effect on how the objects are referenced by the CTrilinos
tables.  This means that, if a user invokes a base class method on an
object stored in the table for the derived class (e.g. invoking
Epetra_MultiVector_Random() on an Epetra_Vector stored in the table
specific to vectors), then a <tt>dynamic_cast<></tt> must be peformed
each time.

If a user is repeatedly invoking base class methods, it
would be wise to perform this step only once and save the result for
subsequent use.  This can be done by either (a) creating an additional
RCP to the object in the base class table ("aliasing") or (b) simply
moving the existing RCP from the derived class table to the base class
table ("migrating").  These two operations can be performed using the
CT_Alias() and CT_Migrate() functions.  Note that, when an alias is
created, both the new and the old table entries must be explicitly
removed in order for the underlying object to be destroyed.

\section warn Warning!!

When any method returns the (non-generic) ID struct associated with
an object, that struct should always be stored so that the destructor
function can be invoked.  Doing the following instead would result in
a memory leak:

\code
int nels;
CT_Epetra_CrsGraph_ID_t G;

G = Epetra_CrsGraph_Create(...);

nels = Epetra_BlockMap_NumMyElements(Epetra_CrsGraph_RowMap());  /* Leak! */
\endcode

\section rules Summary of the Rules

To prevent data corruption, follow these rules:

\ul

\li NEVER modify ID struct members directly; treat it as a black box.

\li NEVER make a copy of an ID struct or keep a generic ID struct
longer than necessary.

\endul

To prevent memory leaks, follow these rules:

\ul

\li ALWAYS explicitly call the CTrilinos destructor method for an object
BEFORE its ID struct goes out of scope.

\li ALWAYS delete both the original and new ID struct created by CT_Alias()
when you are finished with the underlying object.

\li ALWAYS store a struct returned by a method so that you can call its
destructor later.

\endul

\section examples Simple Example Code

The following code comes from the CTrilinos example
<tt>verySimple.c</tt>.  This example follows from the Epetra example
of the same name.

Note that the only CTrilinos header files that should be included in
user code using pre-processor macros are ones ending in <tt>.h</tt>.
All files ending in <tt>.hpp</tt> support the internal workings of
CTrilinos and should never be needed outside CTrilinos itself.
Moreover, they include C++ code and, as such, their inclusion in C
code will make the compiler very unhappy.

\include verySimple.c

\section packages Packages

Portions of the following packages have been wrapped thus far:

\ul
\li Epetra
\li Amesos
\li AztecOO
\li Galeri
\li Ifpack
\li Teuchos
\endul

We choose what packages and classes to wrap based in part on demand,
so please let us know which classes are of interest to you.  If there
is a simple example code that makes use of the same classes you'd
like wrapped, please point us to it.
*/

/*! \example verySimple.c
 * This is a very simple example of how to use the CTrilinos interface
 * to Epetra.  This example follows from the Epetra example by the same
 * name.
*/

/*! \example CrsGraph_example.c
 * This is an example of how to use the CTrilinos interface to Epetra.
 * This example follows from the Epetra example my_example.
*/

/*! \example example_AmesosFactory_Tridiag.c
 * This is an example of how to use the CTrilinos interface to Amesos.
 * This example follows from the Amesos example by the same name.
*/

/*! \example simple_epetra_aztecoo.c
 * This is an example of how to use the CTrilinos interface to AztecOO.
 * This example follows from the AztecOO example by the same name.
*/

/*! \example example_Galeri_LinearProblem.c
 * This is an example of how to use the CTrilinos interface to Galeri.
 * This example follows from the Galeri example LinearProblem.
*/

/*! \example Ifpack_example_Amesos.c
 * This is an example of how to use the CTrilinos interface to Ifpack.
 * This example follows from the Ifpack example Ifpack_ex_Amesos.
*/

