<!--
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!    ATTENTION      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !!!!  PLEASE VIEW THE BASIC XML EXAMPLE AND BASIC DEPENDENCY EXAMPLE  !!!!
   !!!!  FIRST BEFORE READING THIS EXAMPLE. THEY PROVIDE FUNDAMENTAL     !!!!
   !!!!  KNOWLEDGE THAT WILL BE CRUCICAL IN UNDERSTANDING THIS EXAMPLE.  !!!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-->


<!--
 When it comes to dependencies, you can do some pretty crazy awesome stuff
 in Optika. The purpose of this example is to show you some of the more complex
 things you can accomplizsh using these dependencies. In case you missed the 
 warning above, please look at the Basic Dependencies example first before you
 start digging into this one. If you don't, you'll probably be really really
 confused and stuff.
-->

<!--
 We'll start off by just declaring all of our Parameters and ParameterLists.
 We're going to construct to sublists here. The first one will help us
 show how to used dependencies in tandem. The second part will show us how to
 create dependencies that have multipled dependents and dependees.
-->
<ParameterList name="Root List">
  <!--
       We'll use these parameters to demonstrate using Dependencies in tandem.
  -->
  <ParameterList id="8" name="Surface Definition Parameters">
    <Parameter
      name="Ndim"
      type="int"
      value="1"
      id="5"
      validatorId="1"
      docString="Number of dimensions"
      />
    <Parameter
      name="Nsurf_types"
      type="int"
      value="1"
      id="6"
      validatorId="2"
      docString="The number of different surface types you have"
      />
    <Parameter
      name="Surf_Type"
      type="Array(string)"
      value="{Infinite Planar Wall}"
      id="7"
      validatorId="3"
      docString="Array of surface types"
      />
  </ParameterList>
  <!-- 
       We'll use these parameters to demonstrate using Dependencies with
       multiple dependees and dependents.
  -->
  <ParameterList id="4" name="CRAZY AWESOME DEPENDENCY STUFF...list">
    <Parameter
      name="Are you at all cool?"
      type="bool"
      value="true"
      id="0"
      docString="Hey, it's a valid question."
    />
    <Parameter
      name="Awesomeness"
      type="int"
      validatorId="0"
      id="1"
      docString="How awesome are you?"
      value="7"
      />
    <Parameter
      name="Bossness"
      type="int"
      validatorId="0"
      id="3"
      docString="How boss are you?"
      value="7"
      />
    <Parameter
      name="Special parameter"
      type="string"
      value=""
      id="2"
      docString="A parameter that only the coolest of the cool can see"
      />
  </ParameterList>
  <!-- Here we're going to setup all of the validators we want to use. For a
       more thorough explination of what we're doing here, please refer to the
       validator example.
  -->
  <Validators>
    <!-- We'll use this validator for the first part of our demo. It's just 
         going to help us restrict the Sweetness and Awesomeness Parameters
         to values 1 thru 10.
    -->
    <Validator 
      max="10"
      min="1"
      precision="0"
      step="1"
      type="EnhancedNumberValidator(int)"
      validatorId="0"
      />
    <!-- We're going to use this validator to make sure that Nsurf_types is
         always positive
    -->
    <Validator 
      min="0"
      precision="0"
      step="1"
      type="EnhancedNumberValidator(int)"
      validatorId="2"
      />
    <!-- We'll use this validator to make sure the user can only only enter
         a value between 1 and 3 for the Ndim parameter.
    -->
    <Validator 
      max="3"
      min="1"
      precision="0"
      step="1"
      type="EnhancedNumberValidator(int)"
      validatorId="1"
      />
    <!-- The next three validators are going to be used on the Surf_type
         parameter. Now depending on what Ndim is set to we're going to 
         want to use one of these three validators on Surf_type. "But Kurtis,
         how can we ever do something so awesome as that?" you might ask. Well
         just hold on to your pants. We'll explore that a little more below
         in the dependencies.
    -->
    <Validator type="ArrayValidator(StringValidator, string)" validatorId="3">
      <Validator type="StringValidator">
        <String value="Infinite Planar Wall"/>
        <String value="Finite Planar Wall"/>
      </Validator>
    </Validator>
    <Validator type="ArrayValidator(StringValidator, string)" validatorId="4">
      <Validator type="StringValidator">
        <String value="Infinite Planar Wall"/>
        <String value="Finite Planar Wall"/>
        <String value="Colloids"/>
        <String value="Pore"/>
        <String value="Finite Pore"/>
        <String value="Tapered Pore"/>
      </Validator>
    </Validator>
    <Validator type="ArrayValidator(StringValidator, string)" validatorId="5">
      <Validator type="StringValidator">
        <String value="Infinite Planar Wall"/>
        <String value="Finite Planar Wall"/>
        <String value="Colloids"/>
        <String value="Atoms"/>
        <String value="Point Atoms"/>
        <String value="Finite Length Cylinder"/>
        <String value="Cylinder with Periodic function for the radius"/>
        <String value="Pore"/>
        <String value="Finite Pore"/>
        <String value="Tapered Pore"/>
      </Validator>
    </Validator>
  </Validators>
  <Dependencies name="DEP_ANONYMOUS">
    <!--
         Hoookay. You ready? Cause this is about to get like camping, it's going
         to be intense (get it? cause "intense" sounds like "in tents"). First
         Let's talking about using dependencies in tandem. The first thing we
         want to do is make the Surf_type parameter's array length dependent
         the value of the parameter Nsurf_types. We do this with a
         NumberArrayLengthDependency. Since the dependee in this case is of
         type "int" and the dependent is of type "string" we use the type
         attribute "NumberArrayLengthDependency(int, string)". We specify
         the dependee as parameter 6 and the dependent as parameter number
         7. Pretty simple right? But it's really powerful. Just take a moment.
         Revel in the power...
    -->
    <Dependency type="NumberArrayLengthDependency(int, string)">
      <Dependee parameterId="6"/>
      <Dependent parameterId="7"/>
    </Dependency>

    <!-- Now we need to do something a little more tricky. Depending on the
         number of dimensions (the value of the Ndim parameter), we want to 
         use different validators on the Surf_type type parameter. In this case
         we'll accomplish this feat using a RangeValidatorDependency.
         RangeValidatorDependencies work by specifying a particular validator
         for each specified range of values. In this case, our ranges aren't
         very big, but you get the idea...
    -->
    <Dependency type="RangeValidatorDependency(int)">
      <Dependee parameterId="5"/>
      <Dependent parameterId="7"/>
      <!-- Here is where we specify which ranges should be associated with
           which validator. If Ndim is between 1 and 1 (i.e. if it's 1 because
           the max of a range is exclusive), we 
           want to use validator 3. If Ndim is 2, we want to use validator 4.
           Etc. Etc...You get the point.
       -->
      <RangesAndValidators>
        <Pair max="2" min="1" validatorId="3"/>
        <Pair max="3" min="2" validatorId="4"/>
        <Pair max="4" min="3" validatorId="5"/>
      </RangesAndValidators>
      <!-- AND THAT'S IT! Simple, right? I mean we've done some pretty
           sweet stuff here. But we're not quite finished yet
      -->
    </Dependency>

    <!-- Ok, first things first. Let's take a little breather here. You've come
         quite a long way. Give yourself a pat on the back. Because of all your
         hard work I'm going to let you in on a little secret. Up until this
         point you've only seen dependencies that have one dependee and one
         dependent, but the truth is all dependencies can actually have
         multiple dependents! And, if you use the super special
         ConditionVisualDependency, you can actually have multiple dependees!!!
         Holy cow! I know right? Just blew your mind didn't I? Well let's get on
         with it already.
    -->

    <!-- So first we'll tackle multiple dependents. Let's setup a
         BoolVisualDependency...WITH MULTIPLE DEPENDENTS! It's actually really
         simple. Just add a <Dependent> tag for each additional dependent
         you want the dependencies to have.
    -->
    <Dependency showIf="true" type="BoolVisualDependency">
      <Dependee parameterId="0"/>
      <Dependent parameterId="3"/>
      <Dependent parameterId="1"/>
    </Dependency>

    <!-- Ok, time for the crem de la crem. The only Dependency that allows
         for multiply dependents is the ConditionVisualDependency. It allows you
         to say "Based on the values of these dependee's, do or don't show
         these dependents". First, we must declare all of the dependees and
         dependents that are going to be used in this dependency.
    -->
    <Dependency showIf="true" type="ConditionVisualDependency">
      <Dependee parameterId="3"/>
      <Dependee parameterId="0"/>
      <Dependee parameterId="1"/>
      <Dependent parameterId="2"/>
      <!--
           The way we use these dependee's together is something called a
           condition. A condition usually tests the value of a parameter and
           returns true or false. Conditions can then be "added" together using
           another type of condition, the BoolLogicCondition. You can:
           Logically "and" a group of conditions together; Logically "or" a
           group of conditions together; and test to see if a group of 
           conditions are all equal to one another. Let's see this in
           action
      -->

      <!-- We only want to show the Special parameter to show if the
           "Awesomeness" and "Bosseness" parameters are equal to 10, and if
           the "Are you cool at all" parameter is true. So what we'll do is
           create a condition for each one of those parameters and then 
           logically "and them together using an AndCondition.
      -->

      <Condition type="AndCondition">
        <!--
             This is a number condition. It just tests to see if the value
             of a number parameter is greater than 0. If it is, the condition
             evaluates to true, otherwise it evaluates to false. This let's
             us test the "Bossness" parameter.
        -->
        <Condition parameterId="3" type="NumberCondition(int)">
          <!--
               Remember when I said that number conditions compare the
               parameters value to 0? Well I kind of lied. The true is
               you can actually run the parameters value through a function
               first, and then test the return value against 0. By using this
               subtraction funtion, we can ensure the "Bossness Parameter"
               is at least equal to 10. The funciton simply takes the value of
               the parameter and subtracts "9" from it (the operand value).
               Then it tests the value against 0. Since this funciton will only
               give a value greater than 0 when the parameter has a value of
               10 or above, we've accomplished our goal :)
           -->
          <Function operand="9" type="SubtractionFunction(int)"/>
        </Condition>
        <!-- This is pretty much the same as the condition above. We're
             just applying it also to the "Awesomeness" parameter.
        -->
        <Condition parameterId="1" type="NumberCondition(int)">
          <Function operand="9" type="SubtractionFunction(int)"/>
        </Condition>
        <!-- This is a bool Condition. It just tests the value of a boolean
             parameter. If the parameter is true, then this condition is true,
             and vice versa
        -->
        <Condition parameterId="0" type="BoolCondition"/>
      </Condition>
    </Dependency>
  </Dependencies>
  <!-- Next, bask in the rediculous glory of it all... -->


  <!--
    Alright, here's a few final notes.

    -Besides Bool and Number conditions, there is also a StringCondition. These
      are collectively called parameter conditions.

    -All of the Parameter Conditions have a bool
     switch that allow you to say "evaluate to true if the condition is false".
     just add the attribute "whenParamEqualsValue" and set it to false.

    -There's also a NotCondition that negates the condition given to it.

    -You can chain together an arbitrary amount of Conditions. You could give 
     can And condition a list of conditions that contained some Or coniditoins,
     which contained some Not conditions, which contained some...
     we'll you get the idea.

    That's it! You're now an Optika expert! I'm so proud of you :D Good job!
    Be sure to tell all your friends!
   -->
</ParameterList>

