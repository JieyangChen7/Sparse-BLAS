<ParameterList name="ANONYMOUS">
  <!--
    Alright, first we'll set up all the prameters.
  -->

  <Parameter 
    id="0"
    name="Awesomeness"
    type="int"
    value="10"
    docString="How awesome you think dep lists are."
  />
  <Parameter 
    id="1"
    name="Cheese array stuff:"
    value="{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
    type="Array(int)"
    docString="Array stuff"
  />
  <Parameter 
    docString="Your favorite type of cheese"
    id="2"
    name="Favorite Cheese"
    type="string"
    value="American"
    validatorId="0"
  />
  <Parameter 
    id="3"
    name="Max Iters"
    type="int"
    value="1550"
    docString="Determines the maximum number of iterations in the solver"
  />
  <Parameter 
    id="4"
    name="No awesome param"
    type="bool"
    value="true"
    docString="Whether or not the awesome parameter should be shown"
  />
  <ParameterList id="7" name="Preconditioner">
    <Parameter 
      id="5"
      name="Drop Tolerance"
      type="double"
      value="0.001"
      docString="The tolerance below which entries from the factorization are left out of the factors."
    />
    <Parameter 
      id="6"
      name="Type"
      type="string"
      value="ILU"
      docString="The tpye of preconditioner to use"
    />
  </ParameterList>
  <Parameter 
    id="8"
    name="ShowPrecs"
    type="bool"
    value="false"
    docString="Whether or not to show the preconditioners"
  />
  <Parameter 
    id="9"
    name="Swiss rating"
    type="int"
    value="0"
    docString="How you rate swiss on a scail of 1 to 10"
  />
  <Parameter 
    id="10"
    name="Tolerance"
    type="double"
    value="1e-10"
    docString="The tolerance used for the convergence check"
  />
  <ParameterList id="13" name="Water">
    <Parameter 
      id="11"
      name="Amount in Buckets"
      type="Array(double)"
      value="{2.5, 2.5, 2.5}"
      docString="How much water is in each bucket"
    />
    <Parameter 
      id="12"
      name="Number Of Buckets"
      type="int"
      value="3"
      docString="How many buckets we have"
    />
  </ParameterList>
  <!-- A validator we're going to use -->
  <Validators>
    <Validator type="StringValidator" validatorId="0">
      <String value="American"/>
      <String value="Swiss"/>
      <String value="Pepperjack"/>
    </Validator>
  </Validators>
  <!--
    Here is where we we create Dependencies. There are several different types of 
    dependencies but they all follow the same general outline: A dependent 
    (which can be a parameter or parameter list) is dependent upon a 
    dependee (which is always a non-array parameter). Different dependencies 
    usually have different requirements of their dependee and dependent. So be 
    sure to check a dependecies documentation if you're at all unsure whether 
    or not you're using one correctly. Also, if you use a dependency 
    incorrectly, you'll be notified by an error and the GUI will never execute.
    It's always important to make sure the GUI can at least run. Most errors 
    that result from improperly formed dependencies will be caught before 
    the user ever sees the GUI.
   
    All dependency's need to be declared within the <Dependencies> tag.
    And just like the <Validators> tag, the <Dependencies> tag needs to be a
    direct child of the root ParameterList.
   -->

  <Dependencies name="My dep sheet">
   <!--
    Below is a bool visual dependency. What this means is the dependent's 
    visibility to the user is determined by the dependee's boolean value. 
    Here the dependent is the ParameterList "Preconditioner".
    The dependee is a boolean parameter called ShowPrec. We only want the 
    Preconditioner ParameterList to show if the ShowPrecs parameter is set to 
    true, so we give the boolean value of "true" as the showIf argument.
   
    If we were to write out this dependency as a sentance, it would read like 
    this: Only show the Preconditioner list if the ShowPrecs parameter is set 
    to true.
   -->
    <Dependency showIf="true" type="BoolVisualDependency">
      <Dependee parameterId="8"/>
      <Dependent parameterId="7"/>
    </Dependency>
  <!-- 
    Here we are creating a StringVisualDependency. The dependent this time is 
    a parameter called Swiss rating. We only want the swiss rating parameter 
    to show if the Favorite Cheese parameter has the value Swiss. So we make 
    Favorite Cheese the dependee, set the desired value to Swiss, and the 
    showIf argument to true. If we were to state this dependency as a sentence
    it would read something like this: Show the "Swiss rating" parameter when
    the "Favorite Cheese" parameter has the value "Swiss".
  --> 
    <Dependency showIf="true" type="StringVisualDependency">
      <Dependee parameterId="2"/>
      <Dependent parameterId="9"/>
      <StringValues>
        <String value="Swiss"/>
      </StringValues>
    </Dependency>
  
  <!--
    Some times you only want a dependent to be shown when another parameter 
    is NOT equal to a value. Here the dependent is the Awesomeness parameter 
    and we only want it to be shown when the No awesome param is equal to 
    false. So we the showIf attribute to false. As a sentance, the 
    dependnecy would read like this: Only show the "Awesomeness" parameter 
    when the "No awesome param" is false.
  --> 
    <Dependency showIf="false" type="BoolVisualDependency">
      <Dependee parameterId="4"/>
      <Dependent parameterId="0"/>
    </Dependency>

  <!-- 
    Obviously the number of buckets we have is going to affect the length of 
    our array parameter. For example: if we change the number of buckets to five
    we'll need an array length of 5. To solve this problem we'll use a 
    NumberArrayLengthDependency. If written in a sentence, the dependency 
    reads like this: The number of entry's in the "Amount in Buckets" array is
    directly dependent upon the "Number Of Buckets" parameter.
  --> 
    <Dependency type="NumberArrayLengthDependency(int, double)">
      <Dependee parameterId="12"/>
      <Dependent parameterId="11"/>
    </Dependency>
  </Dependencies>
  <!-- 
    Some Final notes:
   
    Remember: It's always a good idea to make sure you're GUI works. Basic 
    issues will not allow the GUI to be even displayed to the user. So if your 
    GUI can simply launch, that means you can feel pretty good about the 
    dependencies working the way they should. Still, you should make sure they 
    do what you think their doing.
   
    Remember: Dependents and Dependees don't have to have the same parent list. 
    They just have to be located anywhere!
   
    Remember: When making dependencies, pay close attention to your parameter 
    ids. Make sure you've got everything set up right or program won't even 
    start up (or worse, it'll start up and you won't notice the problem).

    Remmeber: Different depenencies have different requirements. Be sure to 
    check the documentation of the dependency you're using to make sure you're 
    getting it right. Otherwise you (or worse, your users) might have some 
    nasty problems down the road. Most of the time, if you try to preform a 
    dependency incorrectly your program will compile but the GUI will throw an 
    error before it ever opens.
   
    Remember: All depenencies are evaluted before the user can ever interact
    with the GUI. Make sure that your dependee's default values will result in 
    desireable behavior.
   
    Remember: Arrays can't be dependees. If you would like this functionality 
    please contact the author of this package 
    (Kurtis Nusbaum: klnusbaum@gmail.com), because he's thinking about
    including it in a future release.
  --> 
</ParameterList>

