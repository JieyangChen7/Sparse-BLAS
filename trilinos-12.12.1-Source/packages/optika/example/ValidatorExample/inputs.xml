<ParameterList name="ANONYMOUS">
  <Parameter 
    name="Double"
    id="0"
    type="double"
    value="4.5"
    docString="double tester"
    validatorId="0"
  />
  <Parameter 
    id="1"
    name="Filename Array"
    type="Array(string)"
    value="{~/, ~/, ~/}"
    docString="filename array tester"
    validatorId="1"
  />
  <Parameter 
    id="2"
    name="Int"
    type="int"
    value="8"
    validatorId="2"
    docString="Int tester"
  />
  <Parameter 
    id="3"
    name="Int2"
    type="int"
    value="4"
    docString="int min tester"
    validatorId="3"
   />
  <Parameter 
    id="4"
    name="IntArray"
    type="Array(int)"
    value="{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
    docString="intarray tester"
    validatorId="4"
  />
  <Parameter 
    id="5"
    name="Solver"
    type="string"
    value="GMRES"
    docString="The type of solver to use."
    validatorId="5"
  />
  <Parameter 
    id="6"
    name="Step int"
    type="int"
    value="10"
    docString="Step int tester"
    validatorId="6"
  />
  <Parameter 
    docString="string tester"
    id="7"
    isDefault="false"
    isUsed="true"
    name="StringArray"
    type="Array(string)"
    validatorId="7"
    value="{Option1, Option1, Option1, Option1, Option1, Option1, Option1, Option1, Option1, Option1}"
  />
  <Parameter 
    docString="filename tester"
    id="8"
    isDefault="false"
    isUsed="true"
    name="filename"
    type="string"
    validatorId="8"
    value=""
  />
  <!-- So here's where we set up our validators. All validators must be
       declared in the <Validators> tag. The <Validators> tag must itself be
       a direct child of the root <ParameterList> tag.
  -->
  <Validators>
    <!-- First we'll start with number validators. Notice how they are 
         "templated" for a specific number type.
         Number validators have several unique attributes:
          1. Max is the maximum (inclusive) allowed value.
          2. Min is the minimum (inclusive) allowed value.
          3. Step is the amount by which the current value will be changed when
          being edited in the GUI. Play around with this value a bit to really
          get a good idea of what it does.
        This particular validator only allows for values between 0 and 10.
        You don't have to provide the min, max, or step attributes if you don't
        want to. These can be just a good way to enforce that a particular
        parmeter always uses a certain number type.
    -->
    <Validator 
      max="10"
      min="0"
      step="1"
      type="EnhancedNumberValidator(int)"
      validatorId="2"
    />
    <Validator 
      max="100"
      min="0"
      step="10"
      type="EnhancedNumberValidator(int)"
      validatorId="6"
    />

    <!--
         You can provide just a minimum or just a maximum. This validator 
         only allows for positive values
    -->
    <Validator 
      min="0"
      step="1"
      type="EnhancedNumberValidator(int)"
      validatorId="3"
    />

    <!--
         This validator validates numbers of type double. It has a special
         attribute called precission. This is the precision that will be used
         to display the parameter in the GUI, NOT THE ACTUAL PRECISION USED
         TO STORE THE VARIABLE
    -->
    <Validator 
      max="20"
      min="0"
      precision="6"
      step="1e-06"
      type="EnhancedNumberValidator(double)"
      validatorId="0"
    />

    <!-- So let's look at some other validators. This is a string validator.
         When using it you just specify all of the valid string values like 
         so. -->
    <Validator type="StringValidator" validatorId="5">
      <String value="GMRES"/>
      <String value="CG"/>
      <String value="TFQMR"/>
    </Validator>

    <!-- This is a file name validator. It is used on string parameters and
         makes sure the provided value is a file name. If you want the 
         file name to be a file that already exists you can set the
         fileMustExist attribute to true. Here we don't care whether or not
         the file already exists, so we'll set the attribute value to false.
    -->
    <Validator fileMustExist="false" type="FilenameValidator" validatorId="8"/>

    <!-- ArrayValidators allow the validators specified above to be used
         as validators on arrays. You need to specify what type of 
         validator you're going to use and the type of the array parameter on
         which the validator will be applied. This array validator uses an
         enhanced number validator on an array of ints.
    -->
    <Validator 
      type="ArrayValidator(EnhancedNumberValidator(int), int)" 
      validatorId="4"
    >
      <Validator 
        max="20" 
        min="0" 
        step="5" 
        type="EnhancedNumberValidator(int)"
      />
    </Validator>

    <!-- Here's an example of using a string validator in an array context. -->
    <Validator type="ArrayValidator(StringValidator, string)" validatorId="7">
      <Validator type="StringValidator">
        <String value="Option1"/>
        <String value="Option2"/>
        <String value="Option3"/>
        <String value="Option4"/>
      </Validator>
    </Validator>

    <!-- You could even have an array of file names if you wanted. -->
    <Validator type="ArrayValidator(FilenameValidator, string)" validatorId="1">
      <Validator fileMustExist="false" type="FilenameValidator"/>
    </Validator>
    
    <!-- That's pretty much all we've got for you. It's actually all pretty
         simple. Here are a few final notes.
        
       Optika supports all standard teuchos validators. If a validator is used 
       that the Optiak doesn't recognized, the GUI simply won't apply it to the
       parameters. So if you're using validators not part of Teuchos, make sure
       to check that your data is valid after running the getInput function.
   
       Remember: You default value for a parameter should be within the valid 
       range for the validator you are using on it. If this is not the case, 
       an error will be thrown before the GUI can even start up.
   
       Remember: Make sure you're using the right type of validator with the 
       right type of parameter, especially when it comes to arrays. If you 
       don't use the correct validator on the parameter, an error will be 
       thrown before the GUI can even startup.
   
       Careful! Reusing validators on multiple parameters is perfectly legal, 
       but be careful. Things like the NumberValidatorDependency can cause 
       validators min's and max's to change during the running of the GUI.
       This means any parameter using the same validator will have
       it's min's and max's changed too!
    -->
  </Validators>
</ParameterList>

