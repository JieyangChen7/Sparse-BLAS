  Forward Newton Dampening : bool = 1
   # If true, then the state elimination nonlinear solver will
   # use a dampened line search.  Otherwise, it will just take fulls steps.
  Forward Newton Max Iters : int = 20
   # Maximum number of iterations allowed for the forward state
   # solver in eliminating the state equations/variables.
  Forward Newton Max Line Search Iters : int = 20
   # Maximum number of linea search iterations per newton iteration
   # allowed for the forward state solver in eliminating the state equations/variables.
  Forward Newton Tolerance : double = -1
   # Tolarance used for the forward state solver in eliminating
   # the state equations/variables.
  NLP Type : string = First Order
   # The type of MOOCHO NLP subclass to use.
   #   Valid std::string values:
   #     {
   #       "First Order"
   #          Support the NLPInterfacePack::NLPFirstOrder interface which assumes
   #          that full adjoints for the objective and constraint derivatives are
   #          available.
   #       "Direct"
   #          Support the NLPInterfacePack::NLPDirect interface which only assumes
   #          that forward or direct sensitivities and state solves are supported.
   #     }
  Nonlinearly Eliminate States : bool = 0
   # If true, then the model's state equations and state variables
   # are nonlinearlly eliminated using a forward solver.
  Output File Tag : string = 
   # A tag that is attached to every output file that is created by the
   # solver.  If empty "", then no tag is used.  This option simply is
   # passed into the set_output_context(...) function on the underlying
   # MoochoPack::MoochoSolver object.  Therefore, this same parameter
   # can be set in code as well without going through the parameter list.
  Parameters Solution File Base Name : string = 
   # If specified, a file with this basename will be written to with
   # the final value of the parameters.  A different file for each
   # process will be created.  Note that these files can be used for the
   # initial guess for the parameters.
  Show Model Evaluator Trace : bool = 1
   # Determine if a trace of the objective function will be shown or not
   # when the NLP is evaluated.
  Solve Mode : string = Optimize
   # The type of solve to perform.
   #   Valid std::string values:
   #     {
   #       "Forward Solve"
   #          Only solve state equaitons f(x,p)=0 for states x
   #          given fixed parameters values p.
   #       "Optimize"
   #          Solve the simulation constrained optimization problem
   #            min  g(x,p)
   #            s.t. f(x,p)=0
   #          for the state varaibles x and parameters p.
   #     }
  State Solution File Base Name : string = 
   # If specified, a file with this basename will be written to with
   # the final value of the state variables.  A different file for each
   # process will be created.  Note that these files can be used for the
   # initial guess for the state variables.
  Use Built-in Inverse Objective Function : bool = 0
   # Use a built-in form of a simple inverse objection function instead
   # of a a response function contained in the underlying model evaluator
   # object itself.  The settings are contained in the sublist
   # "Inverse Objective Function Settings".
   # Note that this feature allows the client to form a useful type
   # of optimization problem just with a model that supports only the
   # parameterized state function f(x,p)=0.
  Use Finite Differences For Constraints : bool = 0
   # Use  finite differences for missing constraint derivatives (Direct NLP only).
   # See the   options in the sublist "Constraints Finite Difference Settings".
  Use Finite Differences For Objective : bool = 0
   # Use finite differences for missing objective function derivatives (Direct NLP only).
   # See the options in the sublist "Objective Finite Difference Settings".
  Use Parameter Lumping : bool = 0
   # Use a reduced basis to lump optimization parameters as
   # p_orig = P_basis * p.  If set to true, then the settings
   # in "Lumped Parameters Settings" determine how the
   # parameter basis is set.  This feature can be used to safely
   # regularize a problem if there are linearly dependent parameters
   # and will generally speed up the optimiztation algorithms.
  Constraints Finite Difference Settings -> 
   FD Method : string = order-one
    # The method used to compute the finite differences.
    #   Valid std::string values:
    #     {
    #       "order-one"
    #          Use O(eps) one sided finite differences (cramped bounds)
    #       "order-two"
    #          Use O(eps^2) one sided finite differences (cramped bounds)
    #       "order-two-central"
    #          Use O(eps^2) two sided central finite differences
    #       "order-two-auto"
    #          Use "order-two-central" when not cramped by bounds, otherwise use "order-two"
    #       "order-four"
    #          Use O(eps^4) one sided finite differences (cramped bounds)
    #       "order-four-central"
    #          Use O(eps^4) two sided central finite differences
    #       "order-four-auto"
    #          Use "order-four-central" when not cramped by bounds, otherwise use "order-four"
    #     }
   FD Step Length : double = -1
    # The length of the finite difference step to take.
    # A value of < 0.0 means that the step length will be determined automatically.
   FD Step Select Type : string = Absolute
    # Method used to select the finite difference step length.
    #   Valid std::string values:
    #     {
    #       "Absolute"
    #          Use absolute step size "FD Step Length"
    #       "Relative"
    #          Use relative step size "FD Step Length"*||xo||inf
    #     }
   VerboseObject -> 
    Output File : string = none
     # The file to send output to.  If the value "none" is used, then
     # whatever is set in code will be used.  However, any other std::string value
     # will be used to create an std::ofstream object to a file with the given name.
     # Therefore, any valid file name is a valid std::string value for this parameter.
    Verbosity Level : string = default
     # The verbosity level to use to override whatever is set in code.
     # The value of "default" will allow the level set in code to be used.
     #   Valid std::string values:
     #     {
     #       "default"
     #          Use level set in code
     #       "none"
     #          Produce no output
     #       "low"
     #          Produce minimal output
     #       "medium"
     #          Produce a little more output
     #       "high"
     #          Produce a higher level of output
     #       "extreme"
     #          Produce the highest level of output
     #     }
  Inverse Objective Function Settings -> 
   # Settings for the built-in inverse objective function.
   # See the outer parameter "Use Built-in Inverse Objective Function".
   Local Verbosity Level : string = default
    # Overriding verbosity level for this model evaluator object.
    # This level will not propagate to nested model evaluator objects
    # The value of "default" result in the object verbosity level being
    # used instead.
    #   Valid std::string values:
    #     {
    #       "default"
    #          Use level set in code
    #       "none"
    #          Produce no output
    #       "low"
    #          Produce minimal output
    #       "medium"
    #          Produce a little more output
    #       "high"
    #          Produce a higher level of output
    #       "extreme"
    #          Produce the highest level of output
    #     }
   Observation Index : int = -1
    # The index of the observation function, obs_idx.
    # If obs_idx < 0, then the observation will be the state vector x.
    # If obs_idx >= 0, then the observation will be the response function g(obs_idx).
   Observation Multiplier : double = 1
    # observationMultiplier
   Observation Pass Through : bool = 0
    # If true, then the observation will just be used instead of the least-squares
    # function.  This allows you to add a parameter regularization term to any existing
    # response function!
   Observation Target as Parameter : bool = 0
    # If true, then a parameter will be accepted for the state observation vector
    # to allow it to be set by an external client through the InArgs object.
   Parameter Multiplier : double = 1e-06
    # parameterMultiplier
   Parameter Subvector Index : int = 0
    # The index of the parameter subvector that will be used in the
    # regularization term.
   Observation Target Vector -> 
    Add Scalar : double = 0
     # A scalar that will added to the read in vector after it
     # optionally scaled.
    Explicit Array : string = {}
     # The vector specified explicitly as a string interpreted as a Teuchos::Array
     # object.  If this array is set, it will override the vector specified
     # by the above "File Name Base" parameter.
     # Note that a VectorSpaceBase object
     # must be set internally for this to work.
    File Name Base : string = 
     # Base-name of file(s) that will be used to read in the vector.
     # If this parameter is empty "", no file(s) will be read.
     # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
     # must be set internally for this to work.
    Scale By : double = 1
     # A factor by which the read in vector will be scaled by.
   Parameter Base Vector -> 
    Add Scalar : double = 0
     # A scalar that will added to the read in vector after it
     # optionally scaled.
    Explicit Array : string = {}
     # The vector specified explicitly as a string interpreted as a Teuchos::Array
     # object.  If this array is set, it will override the vector specified
     # by the above "File Name Base" parameter.
     # Note that a VectorSpaceBase object
     # must be set internally for this to work.
    File Name Base : string = 
     # Base-name of file(s) that will be used to read in the vector.
     # If this parameter is empty "", no file(s) will be read.
     # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
     # must be set internally for this to work.
    Scale By : double = 1
     # A factor by which the read in vector will be scaled by.
   VerboseObject -> 
    Output File : string = none
     # The file to send output to.  If the value "none" is used, then
     # whatever is set in code will be used.  However, any other std::string value
     # will be used to create an std::ofstream object to a file with the given name.
     # Therefore, any valid file name is a valid std::string value for this parameter.
    Verbosity Level : string = default
     # The verbosity level to use to override whatever is set in code.
     # The value of "default" will allow the level set in code to be used.
     #   Valid std::string values:
     #     {
     #       "default"
     #          Use level set in code
     #       "none"
     #          Produce no output
     #       "low"
     #          Produce minimal output
     #       "medium"
     #          Produce a little more output
     #       "high"
     #          Produce a higher level of output
     #       "extreme"
     #          Produce the highest level of output
     #     }
  Lumped Parameters Settings -> 
   # Settings for parameter lumping.
   # See the outer parameter "Use Parameter Lumping".
   Auto-generate Basis Matrix : bool = 1
    # If true, then a basis matrix will be auto-generated for a given number
    #  of basis vectors.
   Dump Basis Matrix : bool = 0
    # If true, then the basis matrix will be printed the first time it is created
    # as part of the verbose output and as part of the Describable::describe(...)
    # output for any verbositiy level >= "low".
   Ignore Parameter Bounds : bool = 0
    # If true, then any bounds on the parameter subvector will be ignored.
   Local Verbosity Level : string = default
    # Overriding verbosity level for this model evaluator object.
    # This level will not propagate to nested model evaluator objects
    # The value of "default" result in the object verbosity level being
    # used instead.
    #   Valid std::string values:
    #     {
    #       "default"
    #          Use level set in code
    #       "none"
    #          Produce no output
    #       "low"
    #          Produce minimal output
    #       "medium"
    #          Produce a little more output
    #       "high"
    #          Produce a higher level of output
    #       "extreme"
    #          Produce the highest level of output
    #     }
   Nominal Value is Parameter Base : bool = 1
    # If true, then the nominal values for the full parameter subvector from the
    # underlying model will be used for p_orig_base.  This allows p==0 to give
    # the nominal values for the parameters.
   Number of Basis Columns : int = 1
    # If a basis is auto-generated, then this parameter gives the number
    # of columns in the basis matrix that will be created.  Warning!  This
    # number must be less than or equal to the number of original parameters
    # or an exception will be thrown!
   Parameter Subvector Index : int = 0
    # Determines the index of the parameter subvector in the underlying model
    # for which the reduced basis representation will be determined.
   VerboseObject -> 
    Output File : string = none
     # The file to send output to.  If the value "none" is used, then
     # whatever is set in code will be used.  However, any other std::string value
     # will be used to create an std::ofstream object to a file with the given name.
     # Therefore, any valid file name is a valid std::string value for this parameter.
    Verbosity Level : string = default
     # The verbosity level to use to override whatever is set in code.
     # The value of "default" will allow the level set in code to be used.
     #   Valid std::string values:
     #     {
     #       "default"
     #          Use level set in code
     #       "none"
     #          Produce no output
     #       "low"
     #          Produce minimal output
     #       "medium"
     #          Produce a little more output
     #       "high"
     #          Produce a higher level of output
     #       "extreme"
     #          Produce the highest level of output
     #     }
  Objective Finite Difference Settings -> 
   FD Method : string = order-one
    # The method used to compute the finite differences.
    #   Valid std::string values:
    #     {
    #       "order-one"
    #          Use O(eps) one sided finite differences (cramped bounds)
    #       "order-two"
    #          Use O(eps^2) one sided finite differences (cramped bounds)
    #       "order-two-central"
    #          Use O(eps^2) two sided central finite differences
    #       "order-two-auto"
    #          Use "order-two-central" when not cramped by bounds, otherwise use "order-two"
    #       "order-four"
    #          Use O(eps^4) one sided finite differences (cramped bounds)
    #       "order-four-central"
    #          Use O(eps^4) two sided central finite differences
    #       "order-four-auto"
    #          Use "order-four-central" when not cramped by bounds, otherwise use "order-four"
    #     }
   FD Step Length : double = -1
    # The length of the finite difference step to take.
    # A value of < 0.0 means that the step length will be determined automatically.
   FD Step Select Type : string = Absolute
    # Method used to select the finite difference step length.
    #   Valid std::string values:
    #     {
    #       "Absolute"
    #          Use absolute step size "FD Step Length"
    #       "Relative"
    #          Use relative step size "FD Step Length"*||xo||inf
    #     }
   VerboseObject -> 
    Output File : string = none
     # The file to send output to.  If the value "none" is used, then
     # whatever is set in code will be used.  However, any other std::string value
     # will be used to create an std::ofstream object to a file with the given name.
     # Therefore, any valid file name is a valid std::string value for this parameter.
    Verbosity Level : string = default
     # The verbosity level to use to override whatever is set in code.
     # The value of "default" will allow the level set in code to be used.
     #   Valid std::string values:
     #     {
     #       "default"
     #          Use level set in code
     #       "none"
     #          Produce no output
     #       "low"
     #          Produce minimal output
     #       "medium"
     #          Produce a little more output
     #       "high"
     #          Produce a higher level of output
     #       "extreme"
     #          Produce the highest level of output
     #     }
  Parameter Guess -> 
   Add Scalar : double = 0
    # A scalar that will added to the read in vector after it
    # optionally scaled.
   Explicit Array : string = {}
    # The vector specified explicitly as a string interpreted as a Teuchos::Array
    # object.  If this array is set, it will override the vector specified
    # by the above "File Name Base" parameter.
    # Note that a VectorSpaceBase object
    # must be set internally for this to work.
   File Name Base : string = 
    # Base-name of file(s) that will be used to read in the vector.
    # If this parameter is empty "", no file(s) will be read.
    # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
    # must be set internally for this to work.
   Scale By : double = 1
    # A factor by which the read in vector will be scaled by.
  Parameter Lower Bounds -> 
   Add Scalar : double = 0
    # A scalar that will added to the read in vector after it
    # optionally scaled.
   Explicit Array : string = {}
    # The vector specified explicitly as a string interpreted as a Teuchos::Array
    # object.  If this array is set, it will override the vector specified
    # by the above "File Name Base" parameter.
    # Note that a VectorSpaceBase object
    # must be set internally for this to work.
   File Name Base : string = 
    # Base-name of file(s) that will be used to read in the vector.
    # If this parameter is empty "", no file(s) will be read.
    # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
    # must be set internally for this to work.
   Scale By : double = 1
    # A factor by which the read in vector will be scaled by.
  Parameter Upper Bounds -> 
   Add Scalar : double = 0
    # A scalar that will added to the read in vector after it
    # optionally scaled.
   Explicit Array : string = {}
    # The vector specified explicitly as a string interpreted as a Teuchos::Array
    # object.  If this array is set, it will override the vector specified
    # by the above "File Name Base" parameter.
    # Note that a VectorSpaceBase object
    # must be set internally for this to work.
   File Name Base : string = 
    # Base-name of file(s) that will be used to read in the vector.
    # If this parameter is empty "", no file(s) will be read.
    # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
    # must be set internally for this to work.
   Scale By : double = 1
    # A factor by which the read in vector will be scaled by.
  State Guess -> 
   Add Scalar : double = 0
    # A scalar that will added to the read in vector after it
    # optionally scaled.
   Explicit Array : string = {}
    # The vector specified explicitly as a string interpreted as a Teuchos::Array
    # object.  If this array is set, it will override the vector specified
    # by the above "File Name Base" parameter.
    # Note that a VectorSpaceBase object
    # must be set internally for this to work.
   File Name Base : string = 
    # Base-name of file(s) that will be used to read in the vector.
    # If this parameter is empty "", no file(s) will be read.
    # Note that a MultiVectorFileIOBase object and a VectorSpaceBase object
    # must be set internally for this to work.
   Scale By : double = 1
    # A factor by which the read in vector will be scaled by.
