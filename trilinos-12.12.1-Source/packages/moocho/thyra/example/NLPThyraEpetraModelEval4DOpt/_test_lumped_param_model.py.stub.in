#!/usr/bin/env python


#
# Import commands
#

import sys
import os
import re
import math
from optparse import OptionParser


#
# Global constants
#

thyraBaseDir = "@abs_top_srcdir@/../thyra"

moochoBaseBuildDir = "@abs_top_builddir@"


#
# Functions
#


def createRunCommand(
  otherArgs,
  moochOptions,
  moochoThyraParams
  ):
  cmnd = \
       "./MOOCHO_NLPThyraEpetraModelEval4DOpt.exe" + \
       "  " + otherArgs + \
       "  --moocho-extra-options=\"" + moochOptions + "\"" + \
       "  --extra-moocho-thyra-params=\"" + moochoThyraParams + "\"" + \
       "  --echo-command-line"
  return cmnd


def runCase(
  caseName,
  otherArgs,
  moochOptions,
  moochoThyraParams
  ):

  try:
    os.mkdir(caseName)
  except OSError:
    print "The directory " + caseName + " already exists!"
  os.chdir(caseName)
  pwd = os.getcwd()
  print pwd

  # We have to create a symbolic link of the executable in this PWD since the
  # os.system(...) function changes PWD to that of the executable!  Who
  # thought that that behavior was a good idea?

  try:
    os.symlink(
      moochoBaseBuildDir + "/thyra/example/NLPThyraEpetraModelEval4DOpt/MOOCHO_NLPThyraEpetraModelEval4DOpt.exe",
      "MOOCHO_NLPThyraEpetraModelEval4DOpt.exe" )
  except OSError:
    print "Symbolic link to MOOCHO_NLPThyraEpetraModelEval4DOpt.exe already exists!"
    

  cmnd = createRunCommand(otherArgs,moochOptions,moochoThyraParams );

  print "\nRunning command:\n\n", cmnd, "\n\n"
  sys.stdout.flush()
  sys.stderr.flush()
  
  cmndReturn = os.system("cd "+pwd+"; "+cmnd)

  os.chdir("..")

  #print "\ncmndReturn = ", cmndReturn
  
  return cmndReturn


def compareVectorFiles(
  vectorFileName1,
  vectorFileName2,
  minNormError,
  maxNormError
  ):
  cmnd = \
    thyraBaseDir+"/test/operator_vector/compare-thyra-spmd-multivector-files.py " + \
    "  --file1="+vectorFileName1+" --file2="+vectorFileName2+" --norm-type=inf" + \
    "  --min-norm-err="+str(minNormError)+" --max-norm-err="+str(maxNormError) + \
    "  --dump"
  print "\nRunning command:\n\n", cmnd, "\n\n"
  sys.stdout.flush()
  sys.stderr.flush()
  cmndReturn = os.system(cmnd)
  #print "\ncmndReturn = ", cmndReturn
  return cmndReturn                                                                         


#
# Main program
#


if __name__ == '__main__':


  #
  # Read commandline options!
  #

  # ToDo: Implement!


  moochOptions = \
    "MoochoSolver{test_nlp=false}:" + \
    "NLPSolverClientInterface{opt_tol=1e-10,feas_tol=1e-10,max_iter=7}"


  # Create a subdirectory to hold all of these test results

  lumpedParamDir = "moocho_lumped_param_tests"
  try:
    os.mkdir(lumpedParamDir)
  except OSError:
    print "The directory " + lumpedParamDir + " already exists!"
  os.chdir(lumpedParamDir)
  pwd = os.getcwd()


  # A) This is original problem with no basis lumping which has a near zero
  # objective value of 1e-17 and a parameter solution of {2.0,0.0}.

  print "\n***\n*** Running non-lumped model ...\n***\n"

  moochoThyraParams = \
    r"<ParameterList>" + \
    r"  <Parameter name=\"NLP Type\" type=\"string\" value=\"Direct\"/>" + \
    r"  <Parameter name=\"Show Model Evaluator Trace\" type=\"bool\" value=\"0\"/>" + \
    r"  <Parameter name=\"Parameters Solution File Base Name\" type=\"string\" value=\"p.out\"/>" + \
    r"  <Parameter name=\"State Solution File Base Name\" type=\"string\" value=\"x.out\"/>" + \
    r"</ParameterList>"

  cmndReturn = runCase("nonlumped","--p00=4.0 --p01=-5.0",moochOptions,moochoThyraParams );

  if cmndReturn != 0: sys.exit(1)


  # B) This test shows that if you pick an inital guess for p where the
  # single-column basis representation can indeed represent the solution, then
  # you can in fact find the true optimal value for the full parameter solution.
  # The true solution is {2.0,0.0}.  If you simply add a scalar multiple of the
  # single basis column B={0.707107,0.707107}, then you will get the optimal
  # solution of {2.0,0.0} with the reduced parameter of p=x(var_indep)={-1.0}
  # which is what we see in the MoochoJournal.out file!.

  print "\n***\n*** Running single lumped param (optimal) ...\n***\n"

  moochoThyraParams = \
    r"<ParameterList>" + \
    r"  <Parameter name=\"NLP Type\" type=\"string\" value=\"Direct\"/>" + \
    r"  <Parameter name=\"Use Parameter Lumping\" type=\"bool\" value=\"1\"/>" + \
    r"  <Parameter name=\"Show Model Evaluator Trace\" type=\"bool\" value=\"0\"/>" + \
    r"  <ParameterList name=\"Lumped Parameters Settings\">" + \
    r"    <Parameter name=\"Number of Basis Columns\" type=\"int\" value=\"1\"/>" + \
    r"    <Parameter name=\"Ignore Parameter Bounds\" type=\"bool\" value=\"1\"/>" + \
    r"    <Parameter name=\"Dump Basis Matrix\" type=\"bool\" value=\"1\"/>" + \
    r"    <ParameterList name=\"VerboseObject\">" + \
    r"      <Parameter name=\"Verbosity Level\" type=\"string\" value=\"high\"/>" + \
    r"    </ParameterList>" + \
    r"  </ParameterList>" + \
    r"  <Parameter name=\"Parameters Solution File Base Name\" type=\"string\" value=\"p.out\"/>" + \
    r"  <Parameter name=\"State Solution File Base Name\" type=\"string\" value=\"x.out\"/>" + \
    r"</ParameterList>"

  cmndReturn = runCase("param1opt","--p00=2.707107 --p01=0.707107",moochOptions,moochoThyraParams );
  if cmndReturn != 0: sys.exit(cmndReturn)

  cmndReturn = compareVectorFiles(
    pwd+"/nonlumped/p.out.01.00",
    pwd+"/param1opt/p.out.01.00",
    0.0, 1e-10
    )
  #print "\ncmndReturn = ", cmndReturn
  if cmndReturn != 0: sys.exit(1)


  # C) This test shows that if you pick an inital guess for p where the
  # single-column basis representation can not represent the solution, then you
  # do not get the same answer to the fully parameterized optimization problem.
  # In this case, the solution gives the final objective function value of 1.2
  # and not about 1e-17!

  print "\n***\n*** Running single lumped param (nonoptimal) ...\n***\n"

  cmndReturn = runCase("param1nonopt","--p00=4.0 --p01=0.0",moochOptions,moochoThyraParams );
  if cmndReturn != 0: sys.exit(cmndReturn)

  cmndReturn = compareVectorFiles(
    pwd+"/nonlumped/p.out.01.00",
    pwd+"/param1nonopt/p.out.01.00",
    1.0, 1.1
    )
  #print "\ncmndReturn = ", cmndReturn
  if cmndReturn != 0: sys.exit(1)


  # D) This test shows that with a full-rank basis, you can solve the
  # optimization problem for the the same as without the parameter lumping.
  # In this problem we compute the original parameters p_orig={2.0,0.0} using
  # the affine approximation parameters p=x(var_indep)={2.12132,-4.94975}.
  # This is good confirmation that this capability is working correctly!

  print "\n***\n*** Running full lumped param (optimal) ...\n***\n"

  moochoThyraParams = \
    r"<ParameterList>" + \
    r"  <Parameter name=\"NLP Type\" type=\"string\" value=\"Direct\"/>" + \
    r"  <Parameter name=\"Use Parameter Lumping\" type=\"bool\" value=\"1\"/>" + \
    r"  <Parameter name=\"Show Model Evaluator Trace\" type=\"bool\" value=\"0\"/>" + \
    r"  <ParameterList name=\"Lumped Parameters Settings\">" + \
    r"    <Parameter name=\"Number of Basis Columns\" type=\"int\" value=\"2\"/>" + \
    r"    <Parameter name=\"Ignore Parameter Bounds\" type=\"bool\" value=\"1\"/>" + \
    r"    <Parameter name=\"Dump Basis Matrix\" type=\"bool\" value=\"1\"/>" + \
    r"    <ParameterList name=\"VerboseObject\">" + \
    r"      <Parameter name=\"Verbosity Level\" type=\"string\" value=\"high\"/>" + \
    r"    </ParameterList>" + \
    r"  </ParameterList>" + \
    r"  <Parameter name=\"Parameters Solution File Base Name\" type=\"string\" value=\"p.out\"/>" + \
    r"  <Parameter name=\"State Solution File Base Name\" type=\"string\" value=\"x.out\"/>" + \
    r"</ParameterList>"

  cmndReturn = runCase("param2opt","--p00=4.0 --p01=-5.0",moochOptions,moochoThyraParams );
  if cmndReturn != 0: sys.exit(cmndReturn)

  cmndReturn = compareVectorFiles(
    pwd+"/nonlumped/p.out.01.00",
    pwd+"/param2opt/p.out.01.00",
    0.0, 1e-10
    )
  #print "\ncmndReturn = ", cmndReturn
  if cmndReturn != 0: sys.exit(1)

  # End tests

  os.chdir("..")

  # Success!

  print "\nEnd Result: TEST PASSED"

  sys.exit(0)
