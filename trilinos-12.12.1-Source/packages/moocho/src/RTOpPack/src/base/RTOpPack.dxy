/** \mainpage RTOpPack: Interfaces to Vector Reduction/Transformation Operations in C/C++.

This project contains both C and (templated) C++ interfaces to vector
reduction/transformation operator (RTOp) classes as well as useful
auxiliary tools.  This code and interfaces are divided into four
different libraries:

<ul>

<li> Fundamental interfaces to reduction/transformation operators in C (<tt><b>libRTOpC</b></tt>):

This is the core design for
\ref RTOp_grp "vector reduction/transformation operators in C".  The C language is used for this set of
interfaces for reasons of portability.  The file \c RTOp.h contains C declarations
for functions and structures that are suitable for a wider adoption by the numerical community.  The
file \c RTOp.c contains definitions for many of the functions which helps to describe the behavior
of the interface functions.

Support for sophisticated client/server configurations are supported using a server object
<tt>\ref RTOp_Server</tt>.  This allows a reduction/transformation operator to be created in one process,
transported over a possibly heterogenous network, and then be reconstructed (using the <tt>%RTOp_Sever</tt>
object) in all of the processes where it needs to be applied.  See the document
<A HREF="dynopt.cheme.cmu.edu/roscoe/RTOp/doc/RTOp.ps">RTOp.ps</A> for a discussion of these issues and
the overall design phylosophy.

Platform specific definitions of pertinent data types are defined in the header file \c RTOp_config.h and
this file can be modified for a particular environment.

A set of dummy declarations for MPI datatypes and functions used by code in the package and other packages are
contained in \c RTOp_mpi.h with dummy definitions in \c RTOp_mpi.c.  This code contains a correct implementation
for a subset of MPI functions for the (trivial) serial case.  This approach was taken for simplicity.

Also included in this library are the functions \c RTOp_is_nan(), \c RTOp_is_inf() and \c RTOp_is_nan_inf()
which are encapsulations for the tests to determine if a floating point number is not valid or not bounded.
Ports of these functions to various platforms is needed for correct behavior (not every platform is IEEE
compatible).

<li> Auxiliary tools in C for the use of the C RTOp interface (<tt><b>libRTOpCTools</b></tt>):

The code in this library can be divided into two categories; code that helps numerical algorithm
developers to create concrete \c RTOp_RTOp classes and code that helps linear algebra library
developers to create concrete vector subclasses (most notably, parallel MPI vectors) that accept
\c RTOp_RTOp operators.

<ul>
<li> Helper code for building concreate \c RTOp_RTOp subclasses.

These are C objects and functions that aid in building concrete \c RTOp_RTOp classes
(i.e. defining global \c RTOp_RTOp_vtbl_t variables for each concrete class).

There are several default implementations for RTOp_obj_type_vtbl_t virtual function tables
(description and methods for a datatype) for simple and common object types.
<ul>
<li> \c RTOp_obj_null_vtbl : <tt>obj = {}</tt> (i.e. no object at all)
<li> \c RTOp_obj_index_vtbl : <tt>obj = { RTOp_index_type index; }</tt>
<li> \c RTOp_obj_value_vtbl : <tt>obj = { RTOp_value_type value; }</tt>
<li> \c RTOp_obj_value_index_vtbl : <tt>obj = { RTOp_value_type value; RTOp_index_type index; }</tt>
<li> \c RTOp_obj_value_value_vtbl : <tt>obj = { RTOp_value_type value1; RTOp_value_type value2; }</tt>
<li>
</ul>
Above, every <tt>RTOp_RTOp</tt> operator \c op that does not perform a reduction (i.e. transformation operator
only) should have <tt>op.vtbl->reduct_vtbl == &::RTOp_obj_null_vtbl</tt>.  Likewise, any <tt>RTOp_RTOp</tt>
operator \c op that does have any state associated with the operator object itself (i.e. <tt>op.obj_data == NULL</tt>)
should have <tt>op.vtbl->obj_data_vtbl == &::RTOp_obj_null_vtbl</tt>.

Tools are also available for reduction operations.  Since reduction operation
\verbatim

for( i = 1; i < num_proc; ++i ) inout_reduct_obj += in_reduct_obj
\endverbatim
which adds a floating point reduction object is so common (i.e. norms, dot product etc.), default
implementations for the reduction functions in
<tt>RTOp_RTOp_vtbl_t</tt> are defined in the file RTOp_reduct_sum_value.h.
Similary functions for the \c max() and \c min() operations of scalar floating point reduction objects are
given in the files \c RTOp_reduct_max_value.h and \c RTOp_reduct_min_value.h respectively.   For more general
reductions, the developer may have no choice but to implement the function pointed to by
\c ::RTOp_RTOp_vtbl_t::reduce_reduct_objs themselves.  However, the
macro <tt>::INSERT_GET_REDUCT_OP_FUNCS()</tt> defined in the header file RTOp_get_reduct_op.hpp can be used
to create the implementation of the function <tt>RTOp_RTOp_vtbl_t::get_reduct_op</tt>.  Therefore, there is
no excuse for an <tt>RTOp_RTOp</tt> subclass not to return <tt>reduct_op_func_ptr!=NULL</tt> from the
<tt>op.vtbl->get_reduct_op</tt> function.

<li> Script for building user defined \c RTOp_RTOp subclasses.

The perl script 'new_rtop.pl' has been created to automate the tasks of buiding a concreate C RTOp
subclass.  This script uses the above mentioned tools to construct the implementation files.
See <tt>\ref HowToCreateNewRTOpSubclass_grp "HowTo.CreateNewRTOpSubclass"</tt> for examples
of how to use this script.


<li> Helper code for building concreate vector implementations that accept \c RTOp_RTOp operator objects.

The file <tt>\ref RTOpToMPI_grp "RTOpCppToMPI.hpp"</tt> contains a few helper functions that can be used
by C/C++ vector implementations to apply \c RTOp_RTOp objects using MPI.  In particular, the function \c RTOp_MPI_apply_op()
takes care of most of the ugly details required to implement fully functional parallel vectors using MPI.
The encapsulation function \c RTOp_apply_op_mpi() (which calls \c RTOp_MPI_apply_op() ) takes care of even more details of implementing an MPI vector
class but only works with dense vector elements but otherwise is very general.  The function \c RTOp_apply_op_serial()
likewise takes care of all of the details of implementing dense serial vectors that acept \c RTOp_RTOp reduction/transformation
operator objects.  However, if something more specialized is needed by a vector subclass, the implementation of these functions should be
studied.

</ul>

<li> Fundamental interfaces to reduction/transformation operators in C++ (<tt><b>libRTOpPack</b></tt>):

The C interfaces to vector reduction transformation operators in RTOp.h are adequate for use in
C++ but do not take advantage of C++ features like default constructors, exception handling
or templated types.  Therefore, a set of corresponding \ref RTOpCpp_grp "C++ interfaces" have been developed and
placed in the namespace <tt>RTOpPack</tt> and are included in the file <tt>RTOpCpp.hpp</tt>.  The templated
class <tt>RTOpPack::RTOpT</tt> is an abstract interface to reduction/transformation operators and parallels
the C <tt>RTOp_RTOp</tt> <tt>struct</tt> andd interface functions.  There are other useful classes as well
to make using RTOp operators in C++ easier and safer.

There is a typedef that defines <tt>RTOpPack::RTOpT<RTOp_value_type></tt> as a new type.
<tt>RTOpPack::RTOp</tt>.  This allows C++ clients that do not need to be templated to use the 
<tt>RTOpPack::RTOpT</tt> C++ interface without ever having to explicitly use the template syntax.

It is anticipated that a very common occurance will be that a C <tt>RTOp_RTOp</tt> reduction/transformation operator
object will be accessed by C++ clients (i.e. vector implementations).  C++ clients would like to be able to use
the <tt>RTOpPack::RTOp</tt> interface to access these operator objects for obvious reasons.  To make this possible,
this library contains the subclass <tt>RTOpPack::RTOpC</tt> which implements the <tt>%RTOpPack::RTOp</tt> interface
for a C <tt>%RTOp_RTOp</tt> operator object.  The only penalty is an extra level of indirection and will not result
in a serious performance problem.

Another interesting situation is the case where it is desired to use a C++ <tt>RTOpPack::RTOp</tt>
reduction/transformation operator through the C interface by a C client.  The design supports this scenario
using helper functions declared in RTOp_RTOp_C_Cpp.h to create a valid <tt>RTOp_RTOp</tt> object
for an <tt>%RTOpPack::RTOp</tt> object.  The class <tt>RTOpPack::RTOpCppToC</tt> makes it easy
to wrap any <tt>RTOpPack::RTOp</tt> object in a <tt>RTOp_RTOp</tt> object.

<li> Auxilliary tools in C++ for the use of the C++ RTOp interface (<tt><b>libRTOpPackTools</b></tt>):

This library contains a mixed set of tools that are not fundamental to the C++ interface.

The header file <tt>print_sub_vector.hpp</tt> contains a function <tt>RTOpPack::output()</tt> that can be
used to print the elements in a <tt>RTOpPack::SubVector</tt> object to a <tt>std::ostream</tt> object.

The file <tt>RTOpCppToMPI.hpp</tt> contains a few helper functions that can be used by C++ vector implementations
to apply <tt>RTOpPack::RTOp</tt> objects using MPI.  In particular, the function <tt>RTOpPack::MPI_apply_op()</tt>
takes care of most of the ugly details required to implement fully functional parallel vectors using MPI.
However, if something more specialized is needed by a vector subclass, the implementation of this function should be
studied.

</ul>

*/

/** \defgroup HowToCreateNewRTOpSubclass_grp "HowTo" for creating new C RTOp subclasses.
 *
 * The following is the contents of the file <tt>HowTo.CreateNewRTOpSubclass</tt>.  The
 * example implementation files are given in:
 * <ul>
 * <li> \c RTOp_TOp_ele_wise_div.c,  \c RTOp_TOp_ele_wise_div.h
 * <li> \c RTOp_ROp_max_rel_step.c,  \c RTOp_ROp_max_rel_step.h
 * <li> \c RTOp_TOp_ele_wise_prod.c, \c RTOp_TOp_ele_wise_prod.h
 * <li> \c RTOp_ROp_max_feas_step.c, \c RTOp_ROp_max_feas_step.h
 * </ul>
 *
 * \verbinclude HowTo.CreateNewRTOpSubclass
 */
